rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for specific user documents and their subcollections
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId); // Owner can write their own user doc

      match /todos/{todoId} {
        allow read, update: if isAuthenticated() && (
                               isOwner(userId) ||
                               (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith)
                             );
        allow create, delete: if isOwner(userId);
      }

      // Contacts subcollection: users/{ownerId}/contacts/{contactEntryId}
      // ownerId = Der Benutzer, dem die Kontaktliste gehört
      // contactEntryId = Die UID des Kontakts in der Liste
      match /contacts/{contactEntryId} {
        // Der ownerId kann seine gesamte Kontaktliste lesen, Einträge hinzufügen, ändern, löschen
        allow read, write, delete: if isOwner(userId);

        // ERGÄNZUNG: Der Benutzer, dessen UID dem contactEntryId entspricht,
        // darf seinen eigenen Eintrag in der Liste eines anderen Benutzers ERSTELLEN.
        // Dies wird benötigt, wenn User B die Anfrage von User A annimmt
        // und User B sich selbst zur Kontaktliste von User A hinzufügt.
        // Der 'userId' im Pfad ist hier der 'ownerId' der Kontaktliste (z.B. User A).
        // Der 'contactEntryId' im Pfad ist die UID des Kontakts, der hinzugefügt wird (z.B. User B).
        allow create: if isAuthenticated() && request.auth.uid == contactEntryId;
      }

      // Outgoing Contact Requests: users/{senderId}/outgoingContactRequests/{receiverId}
      match /outgoingContactRequests/{receiverId} {
        // Sender (owner) can read, create, and delete (e.g. cancel request)
        allow read, write: if isOwner(userId); // userId refers to senderId here
        // Receiver can delete (when rejecting or accepting the request)
        allow delete: if isAuthenticated() && request.auth.uid == receiverId;
      }

      // Incoming Contact Requests: users/{receiverId}/incomingContactRequests/{senderId}
      match /incomingContactRequests/{senderId} {
        // Receiver (owner) can read and delete (accept/reject)
        allow read, delete: if isOwner(userId); // userId refers to receiverId here
        // Sender can create this request for {receiverId}
        allow create: if isAuthenticated() && request.auth.uid == senderId;
      }
    }

    // Collection group queries
    match /{path=**}/todos/{todoId} {
       allow read: if isAuthenticated() && (
                       request.auth.uid == path[1] ||
                       (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith) ||
                       (resource.data.mentionedUsers != null && request.auth.uid in resource.data.mentionedUsers)
                    );
    }
  }
} 